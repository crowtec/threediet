javascript:
  function hexRGB(rgb) {
    var hex = [
      rgb.r.toString(16),
      rgb.g.toString(16),
      rgb.b.toString(16)
    ];
    $.each(hex, function (nr, val) {
      if (val.length === 1) hex[nr] = '0' + val;
    });
    return '#' + hex.join('');
  }

  $(document).ready(function () {
    var rgb_change = function (value, opacity) {
      console.log("hollaaaaa");
      var color = $('#color-picker').minicolors('rgbObject');
      $('[name="color[r]"]').val(color.r);
      $('[name="color[g]"]').val(color.g);
      $('[name="color[b]"]').val(color.b);
    };

    rgb = {
      "r": #{ (@color.r * 255).to_i },
      "g": #{ (@color.g * 255).to_i },
      "b": #{ (@color.b * 255).to_i }
    };

    //c = $('#color-picker').minicolors('rgb2hex');

    $.minicolors.defaults = $.extend($.minicolors.defaults, {
      change: rgb_change,
      defaultValue: hexRGB(rgb),
      theme: 'bootstrap'
    });

    $('#color-picker').minicolors();
  });
.row
  .col-lg-12
    h1.page-header
      | Edit Color
.row.container-fluid
  = bootstrap_form_for(@color, url: admin_color_path, html: {method: 'patch'})  do |f|
    .row.new-color
      .col-md-12
        = f.text_field :name
        .form-group
          label.control-label Color
          input#color-picker.form-control type="hidden"
        = f.hidden_field :r, hide_label: true, value: "#{ (@color.r * 255).to_i }"
        = f.hidden_field :g, hide_label: true, value: "#{ (@color.g * 255).to_i }"
        = f.hidden_field :b, hide_label: true, value: "#{ (@color.b * 255).to_i }"
        = f.text_field :intensity
        = f.submit